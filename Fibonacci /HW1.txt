  	<!DOCTYPE html>
	<head>
		<title>Fibonacci Sequence</title>
		<style>
			table, th, td {
				border: 3px solid black;
				border-collapse: collapse;
				column-width: 100px;
				text-align: center;
			}
			tr:first-child td
			{
				font-weight: bold;
			}
		</style>
	</head>
	<body>
<!-- Background information on the Fibonacci Sequence -->		
		<h1>History of the Fibonacci Sequence</h2>
			<p>The fibonacci sequence is a series of numbers where the next number is found by adding the two numbers before it. The sequence was named after Leonardo Pisano also known as Fibonacci. As he was the son of a merchant, Fibonacci traveled and traded widely and because math is so integral in the trading business, Fibonacci's interest in numbers grew quickly. He first noted the sequence when he was thinking about a mathematical question involving rabbit breeding. Starting with a male and female rabbit, how many pairs of rabbits could be born in a year? While the rabbit question may pose unrealistic conditions, Fibonacci numbers appear in nature (e.g. sunflowers, hurricanes, galaxies). </p>
			<img src="https://botanicamathematica.files.wordpress.com/2014/04/fibonacci-tree.png" alt= "Fibonacci Tree" width="350px" height="300px">
		</body>
 		<input type="text" id="myText">
		<button type="button" onclick="myFunction()">Click me!</button>
		<button type="button" onClick="window.location.reload();">Refresh!</button>
		<div id="MyDiv"></div>
		<script>

		/*
		Recursive function to calculate value for a number in the fibonacci sequence. 
		If the number is 1 then we just return 1. 
		For all other numbers, we get its value by adding the values of the last two numbers before it in the sequence. 
		*/
			function getNthValue(n)
			{
				if (n<=1){
					return n;
				}
				else{
					return getNthValue(n-1) + getNthValue(n-2);

				}
			}
			/*
			Function that creates a table with Fibonacci values from 0 to some number n. The function creates a table element and then appends table elements like tr, td, to the table by string concatenation. The function dynamically creates rows in the table by looping through from 0 to some number n whose value is stored as input as it is taken from the text area. Once we have finished looping, we close off the string with an ending table tag and then set the div's content to the table string. 
			Before we loop through we check that the input is a valid number so if it is a positive integer only
			*/
			function myFunction()
			{
				var table = document.createElement("table")
				var input = document.getElementById("myText").value;
				var error1 = "Cannot compute fib of a negative number";
				var error2 = "Invalid input";
				var rowElem, colElem, colElem2, cell1, cell2;
				if(input<0)
				{
					document.getElementById('MyDiv').innerHTML = error1;
				}
				else if(isNaN(parseInt(input)))
				{
					document.getElementById('MyDiv').innerHTML = error2;
				}
				else
				{
					var htmlOutput = '<table><tr><td>n</td><td>fib(n)</td></tr>';
					for( i = 0; i<=input; i++)
					{
						htmlOutput +=  "<tr><td>" + i + "</td>";
						htmlOutput += "<td>"+ getNthValue(i) +"</td></tr>";

					}
					htmlOutput += "</table>";
					MyDiv.innerHTML = htmlOutput;			
				}
			}
	</script>
	</html>

